import os
import yaml

def validate_yaml(yaml_file):
    try:
        with open(yaml_file, 'r', encoding='utf-8') as file:
            yaml.safe_load(file)
        return True

    except yaml.YAMLError as e:
        print(f"Error in {yaml_file}: {e}")
        return False

def scrape_info(yaml_file):
    with open(yaml_file, 'r', encoding='utf-8') as file:
        return yaml.safe_load(file)

def output_html_table(output_file, yaml_infos):
    output_file.write("""
<table>
    <tr>
        <th>Game & Store Page</th>
        <th>Difficulty</th>
        <th>Progress</th>
        <th>Sortedness</th>
        <th>Quality</th>
        <th>Notes & Sources</th>
        <th>Deck Author</th>
    </tr>""") # can't have multiple line-endings between these, or Markdown parsing chokes

    for _, info in yaml_infos:
        name = info.get('name', '')
        store_link = info.get('store-link', '')
        difficulty = info.get('difficulty', '')
        difficulty_source = info.get('difficulty-source', '')
        progress = info.get('progress', '')
        sortedness = info.get('sortedness', '')
        quality = info.get('quality', '')
        notes_and_sources = info.get('notes-and-sources', '')
        deck_author = info.get('deck-author', '')

        title = name if store_link == '' else f'<a href="{store_link}">{name}</a>'

        progressL = progress.lower()
        progress_is_complete = progressL == 'complete' or progressL == '100' or progressL == '100%'
        progress_display = '-' if progress_is_complete else progress

        difficulty_display = f"{difficulty} ({difficulty_source})" if difficulty_source else difficulty

        output_file.write(f"""
    <tr>
        <td>{title}</td>
        <td>{difficulty_display}</td>
        <td>{progress_display}</td>
        <td>{sortedness}</td>
        <td>{quality}</td>
        <td>{notes_and_sources}</td>
        <td>{deck_author}</td>
    </tr>""") # can't have multiple line-endings between these, or Markdown parsing chokes

    output_file.write("\n</table>")

def main():
    base_dir = os.getcwd()
    yaml_infos = []
    invalid_files = []

    for root, dirs, files in os.walk(base_dir):
        for file in files:
            if file == 'info.yml' or file == 'info.yaml':
                file_path = os.path.join(root, file)
                if validate_yaml(file_path):
                    yaml_infos.append((file_path, scrape_info(file_path)))
                else:
                    invalid_files.append(file_path)

    if invalid_files:
        print("The following info.yaml files are invalid:")
        for invalid_file in sorted(invalid_files):
            print(f" - {invalid_file}")
        exit(1)
    else:
        print("All info.yml files are valid. Generating composite table...")
        yaml_infos.sort(key=lambda x: x[0])

        with open('scripts/decks_status_header.md', 'r', encoding='utf-8') as header_file:
            header_content = header_file.read()

        with open('decks_status.md', 'w', encoding='utf-8') as output_file:

            output_file.write(("<!--\n"
            "    DO NOT MODIFY THIS FILE!\n"
            "    It was generated by gen_decks_status.py as a pre-commit hook from scripts/decks_status_header.py and info.yaml files.\n"
            "-->\n\n"))
            output_file.write(header_content)
            output_file.write('\n')
            output_html_table(output_file, yaml_infos)
        
        print("Composite table generated and written to decks_status.md")

if __name__ == "__main__":
    main()
